define(["./AttributeCompression-078365fc","./Matrix3-250b5421","./Math-8eaecdeb","./Matrix2-4356a811","./createTaskProcessorWorker","./ComponentDatatype-fd927ced","./defaultValue-62d88678","./WebGLConstants-c08260ea","./RuntimeError-fa369431"],(function(e,a,t,r,n,o,i,s,c){"use strict";const u=32767,p=new a.Cartographic,l=new a.Cartesian3,f=new r.Rectangle,d=new a.Ellipsoid,m={min:void 0,max:void 0};return n((function(n,o){const i=new Uint16Array(n.positions);!function(e){e=new Float64Array(e);let t=0;m.min=e[t++],m.max=e[t++],r.Rectangle.unpack(e,t,f),t+=r.Rectangle.packedLength,a.Ellipsoid.unpack(e,t,d)}(n.packedBuffer);const s=f,c=d,h=m.min,C=m.max,g=i.length/3,b=i.subarray(0,g),w=i.subarray(g,2*g),k=i.subarray(2*g,3*g);e.AttributeCompression.zigZagDeltaDecode(b,w,k);const y=new Float64Array(i.length);for(let e=0;e<g;++e){const r=b[e],n=w[e],o=k[e],i=t.CesiumMath.lerp(s.west,s.east,r/u),f=t.CesiumMath.lerp(s.south,s.north,n/u),d=t.CesiumMath.lerp(h,C,o/u),m=a.Cartographic.fromRadians(i,f,d,p),g=c.cartographicToCartesian(m,l);a.Cartesian3.pack(g,y,3*e)}return o.push(y.buffer),{positions:y.buffer}}))}));
